// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  us_username String @id
  us_password String
  us_role_id String
  role Role @relation(fields: [us_role_id], references: [role_id])
  createdAt DateTime @default(now())
  deletedAt DateTime?
  categoryuser Category_For_User[]
  listannouncement List_Announcement[]
}

model Role {
  role_id String @id @default(uuid())
  role_name String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  user User[]
}

model Category{
  cat_id String @id @default(uuid())
  cat_name String
  cat_qty Int
  cat_duration Int
  createdAt DateTime @default(now())
  deletedAt DateTime?
  categoryuser Category_For_User[]
  listannouncement List_Announcement[]
}
model Category_For_User{
  cu_id String @id @default(uuid())
  cu_cat_id String
  cu_us_username String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  user User @relation(fields: [cu_us_username], references: [us_username])
  category Category @relation(fields: [cu_cat_id], references: [cat_id])
}
model List_Announcement{
  la_id String @id @default(uuid())
  la_title String
  la_content String
  la_cat_id String
  category Category @relation(fields: [la_cat_id], references: [cat_id])
  la_us_username String
  user User @relation(fields: [la_us_username], references: [us_username])
  createdAt DateTime @default(now())
  deletedAt DateTime?
  announcement_in_list Announcement_in_List[]
  list_in_playlist List_in_Playlist[]
}
model Playlist{
  pl_id String @id @default(uuid())
  pl_name String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  list_in_playlist List_in_Playlist[]
  playlist_in_screen Playlist_in_Screen[]
}
model Playlist_in_Screen{
  ps_id String @id @default(uuid())
  ps_sc_id String
  ps_pl_id String
  ps_date_start DateTime
  screen Screen @relation(fields: [ps_sc_id], references: [sc_id])
  playlist Playlist @relation(fields: [ps_pl_id], references: [pl_id], onDelete: Cascade)
  createdAt DateTime @default(now())
  deletedAt DateTime?

}
model List_in_Playlist{
  lp_id String @id @default(uuid())
  lp_pl_id String
  lp_la_id String
  playlist Playlist @relation(fields: [lp_pl_id], references: [pl_id],onDelete: Cascade)
  listannouncement List_Announcement @relation(fields: [lp_la_id], references: [la_id])
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

model Announcement_in_List{
  ail_id String @id @default(uuid())
  ail_an_id String
  ail_la_id String
  announcement Announcement @relation(fields: [ail_an_id], references: [an_id])
  listannouncement List_Announcement @relation(fields: [ail_la_id], references: [la_id])
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

model Announcement{
  an_id String @id @default(uuid())
  an_title String
  an_url String
  an_type String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  announcement_in_list Announcement_in_List[]
}

model Screen{
  sc_id String @id @default(uuid())
  sc_ip String
  sc_location String
  sc_name String
  playlist_in_screen Playlist_in_Screen[]
}


